* Interface
** Tabbar
#+BEGIN_SRC emacs-lisp
(use-package tabbar
  :ensure t
  :config (tabbar-mode 1))
#+END_SRC

** Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

** Ido
#+BEGIN_SRC emacs-lisp
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

** Winner mode
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

** Neo tree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config (global-set-key [f8] 'neotree-toggle))
#+END_SRC

* Try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
* Org mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Swiper
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
* Autocomplete
  #+BEGIN_SRC emacs-lisp
;      (use-package auto-complete
;      :ensure t
;      :init
;      (progn
;        (ac-config-default)
;        (global-auto-complete-mode t)
;        (setq ac-sources '(ac-source-filename))
;        ))
  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (progn
        (company-mode)
        (add-hook 'after-init-hook 'global-company-mode)
        ))
  #+END_SRC
* Theme
  #+BEGIN_SRC emacs-lisp
        (use-package color-theme-modern
          :ensure t
          :config
          (progn
            (load-theme 'tango-dark t t)
            (enable-theme 'tango-dark)))
  #+END_SRC
* Python
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
** Jedi
#+BEGIN_SRC emacs-lisp
(use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (add-hook 'python-mode-hook 'jedi:ac-setup))
#+END_SRC
** Elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config
    (elpy-enable))
#+END_SRC

** Auto virtualenvwrapper
#+BEGIN_SRC emacs-lisp
  (use-package auto-virtualenvwrapper
    :ensure t
    :config
    (add-hook 'python-mode-hook #'auto-virtualenvwrapper-activate))
#+END_SRC
